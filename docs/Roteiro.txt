## Configuração do Banco de dados POSTGRES com typeOrm ##

#1 - Instalando o typeOrm e o driver do pg
  yarn add typeorm pg

#2 - Configuração do arquivo: ormconfig.json
  {
    "type": "postgres",
    "host": "localhost",
    "port": 5433,
    "username": "postgres",
    "password": "docker",
    "database": "gostack_gobarber"
  }

#3 - Arquivo de conexão com o database database/index.ts
  import { createConnection } from 'typeorm';
  createConnection();

#4 - Importando a connecção no server.ts
  import './database';

#5 - Add config para migrations no ormconfig e script no package.json

  #Adicionado o caminha de armazenamento das migrations e o diretório para criação
  "migrations" : [
    "./src/database/migrations/*.ts"
  ],
  "cli" : {
    "migrationsDir": "./src/database/migrations"
  }

  #Adicionado um alias para executart o typeorm no package.json
  "typeorm" : "ts-node-dev ./node_modules/typeorm/cli.js"

#6 - Criando as migrations e as tabelas no Banco

  #Criando as migrations
  yarn typeorm migration:create -n CreateAppointments

  #Executando as migrations
  yarn typeorm migration:run

  #Revertendo criação da migration
  yarn typeorm migration:revert

  # Visualização das migrations executadas
  yarn typeorm migration:show

  ### Observação: So pode alterar uma migration se ela ainda não foi versionada ###

  #07 - Alterando o Model

  #Adicionar o Entity do typeorm para informar que o model referencia uma tabela no Banco
  import { Entity } from typeorm

  # Alteração do tsconfig.json - habilitando o decorator funciona apenas com TypeScript
  # Caso não esteja usando o TS pode ser feito o mapeamento de outra forma com typeorm

  "experimentalDecorators": true,
  "emitDecoratorMetadata": true,

  # Mapeamento de colunas e tabelas no model e remoção do constructor

  # Resolvendo erro gerado por não incializar os atributos so model -  Alterção no tsconfig.json
  "strictPropertyInitialization": false,

  #08 - Alterando o repositorio para salvar no banco com o model

  #09 - dicionando Relacionamentos no migration e model
  // KISS - Keep It Simples & Stupid (Mantenha Simples e Stupid seu codigo)
  /**
  * Relacionamentos:
  *
  * Um para um (OneToOne)
  * um para Muitos (OneToMany)
  * Muitos para Muitos (ManyToMany)
  */
  #10 - Model de User e Serviço para criar Usuario no banco
    /**
     * Regras:
     *  1- Não posso duplicar email
     *  2- O password tem que ser criptografado
     */
#11 - Hash de senha para usuário
  # Lib de criptografia
  yarn add bcryptjs

  # add types para reconhecer no typeScript
  yarn add -D @types/bcryptjs

  # add no CreateUserService a lib e implementar o hash no password
   import { hash } from 'bcryptjs'
   const hashedPassword = await hash(password, 8);

#12 - Conceito JWT (Json Web Token)
  Token JWT =  Headers (Tipo de TOken, algorítimo)
              .Payload (Dados Adicionais)
              .Assinatura do Token

# Altenticação do usuário - Criação da rota session
  # lib da JWT
  yarn add jsonwebtoken
  yarn add -D @types/jsonwebtoken

#13 - Trabalhando com middleware
 # Criada a middleware ensureAutheticated para validar se existe um usuário logado

 # Criado um arquivo de configuração para armazenar o token e expiresIn

 # Criado o @types para extender o espress e adicionar o id do user na session
  # Arquivo: express.d.ts
  declare namespace Express {
    export interface Request{
      user:{
        id: string;
      };
    }
  }

  # Com isso temos o id do usuario em todas as rotas autenticadas através do request










